{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/gravatar.ts", "../src/utils/copyright.ts", "../src/utils/customfields.ts", "../src/utils/members.ts", "../src/utils/memberDirectory.ts", "../src/utils/plan.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export async function updateGravatarImages(email: string) {\n  const encodedEmail = encodeURIComponent(email);\n  const endpoint = `https://gravatar.helpers.wipn.org/?email=${encodedEmail}`;\n\n  // Select all elements with the `data-element=\"gravatar\"` attribute\n  const gravatarImages = document.querySelectorAll('[data-element=\"gravatar\"]');\n\n  // Iterate over the NodeList and update each image source\n  gravatarImages.forEach((image) => {\n    image.src = endpoint;\n  });\n}\n\nexport async function getGravatar(email: string) {\n  const encodedEmail = encodeURIComponent(email);\n  return `https://gravatar.helpers.wipn.org/?email=${encodedEmail}`;\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Example usage with MemberStack\n  window.$memberstackDom.getCurrentMember().then(({ data: member }) => {\n    if (member && member.auth.email) {\n      updateGravatarImages(member.auth.email);\n    }\n  });\n});\n", "function updateCopyright(selector: string = '[data-element=\"copyright\"]'): void {\n  const currentYear: number = new Date().getFullYear();\n  const copyrightDateElement: HTMLElement | null = document.querySelector(selector);\n\n  if (copyrightDateElement) {\n    copyrightDateElement.textContent = currentYear.toString();\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  updateCopyright();\n});\n", "// Define an interface for the structure of Memberstack data\ninterface MemberstackData {\n  customFields?: { [key: string]: string | undefined };\n}\n\n(function () {\n  document.addEventListener('DOMContentLoaded', function () {\n    // Get the `_ms-mem` object from the local storage\n    const msMemString = localStorage.getItem('_ms-mem');\n    const msMem: MemberstackData = msMemString ? JSON.parse(msMemString) : {};\n\n    // Get all the elements that have the `ms-code-customfield` attribute\n    const elements = document.querySelectorAll<HTMLElement>('[ms-code-customfield]');\n\n    // Iterate over each element\n    elements.forEach((element) => {\n      // Get the value of the `ms-code-customfield` attribute\n      const customField = element.getAttribute('ms-code-customfield');\n\n      if (customField) {\n        // If customField starts with '!', we invert the logic\n        if (customField.startsWith('!')) {\n          const actualCustomField = customField.slice(1); // remove the '!' from the start\n\n          // If the custom field is empty, remove the element from the DOM\n          if (msMem.customFields && msMem.customFields[actualCustomField]) {\n            element.parentNode?.removeChild(element);\n          }\n        } else {\n          // Check if the user has the corresponding custom field in Memberstack\n          if (!msMem.customFields || !msMem.customFields[customField]) {\n            // If the custom field is empty, remove the element from the DOM\n            element.parentNode?.removeChild(element);\n          }\n        }\n      }\n    });\n  });\n})();\n", "/**\n * Fetches members from MemberStack (using Cloudflare Worker Proxy)\n * @param query - The query string to be appended to the URL (optional)\n * @returns An array of {@link Member}.\n */\nexport async function fetchMembers(query?: string) {\n  try {\n    let url = 'https://members.helpers.wipn.org/';\n    url += query ? query : '';\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\n", "import type { CMSFilters } from '$types/CMSFilters';\nimport type { Member } from '$types/Member';\nimport { getGravatar } from '$utils/gravatar';\nimport { fetchMembers } from '$utils/members';\n\n/**\n * Function to initialize CMS filtering.\n */\nexport function membersFilters() {\n  window.fsAttributes = window.fsAttributes || [];\n\n  window.fsAttributes.push([\n    'cmsfilter',\n    async (filtersInstances: CMSFilters[]) => {\n      // Get the filters instance\n      const [filtersInstance] = filtersInstances;\n      if (!filtersInstance) return;\n\n      // Get the list instance\n      const { listInstance } = filtersInstance;\n\n      // Save a copy of the template\n      const [firstItem] = listInstance.items;\n      const itemTemplateElement = firstItem.element;\n\n      // Fetch external data\n      const members = await fetchMembers();\n\n      // Remove existing items\n      listInstance.clearItems();\n\n      // Create the new items\n      const newItemsPromises = members.map((member: Member) =>\n        createMemberCard(member, itemTemplateElement)\n      );\n      const newItems = await Promise.all(newItemsPromises);\n\n      // Populate the list\n      listInstance.addItems(newItems);\n\n      // Get the template filter\n      const filterTemplateElement =\n        filtersInstance.form.querySelector<HTMLLabelElement>('[data-element=\"filter\"]');\n      if (!filterTemplateElement) return;\n\n      // Get the parent wrapper\n      const filtersWrapper = filterTemplateElement.parentElement;\n      if (!filtersWrapper) return;\n\n      // Remove the template from the DOM\n      filterTemplateElement.remove();\n\n      // Sync the CMSFilters instance with the new created filters\n      // filtersInstance.storeFiltersData();\n    },\n  ]);\n}\n\nasync function createMemberCard(member: Member, templateElement: HTMLDivElement) {\n  // Clone the template element\n  const newItem = templateElement.cloneNode(true) as HTMLDivElement;\n\n  // Query inner elements\n  const firstName = newItem.querySelector<HTMLSpanElement>('[data-element=\"first-name\"]');\n  const lastName = newItem.querySelector<HTMLSpanElement>('[data-element=\"last-name\"]');\n  const chapter = newItem.querySelector<HTMLParagraphElement>('[data-element=\"chapter\"]');\n  const company = newItem.querySelector<HTMLParagraphElement>('[data-element=\"company\"]');\n  const location = newItem.querySelector<HTMLParagraphElement>('[data-element=\"location\"]');\n  const phone = newItem.querySelector<HTMLParagraphElement>('[data-element=\"phone\"]');\n  const profileImage = newItem.querySelector<HTMLImageElement>('[data-element=\"profile-image\"]');\n\n  // Populate inner elements\n\n  // If the member has a first and last name, populate the elements\n  if (firstName) firstName.textContent = member.firstName;\n  if (lastName) lastName.textContent = member.lastName;\n\n  // If the member somehow doesn't have a chapter, default to 'National Virtual'\n  if (chapter) {\n    chapter.textContent = 'National Virtual';\n    if (member.chapter) {\n      chapter.textContent = member.chapter;\n    }\n  }\n\n  // If the member has a publicly visible company, populate the element, otherwise hide it\n  if (company) {\n    if (member.company) {\n      company.textContent = member.company;\n    } else {\n      company.style.display = 'none';\n    }\n  }\n\n  // If the member has a publicly visible location, populate the element, otherwise hide it\n  if (location) {\n    if (member.location) {\n      location.textContent = member.location;\n    } else {\n      location.style.display = 'none';\n    }\n  }\n\n  // If the member has a publicly visible phone number, populate the element, otherwise hide it\n  if (phone) {\n    if (member.phone) {\n      phone.textContent = member.phone;\n    } else {\n      phone.style.display = 'none';\n    }\n  }\n\n  // Get the Gravatar image\n  if (profileImage) {\n    profileImage.src = await getGravatar(member.email);\n  }\n\n  return newItem;\n}\n", "interface PaymentDetails {\n  amount: number;\n  nextBillingDate: number; // Unix timestamp\n}\n\ninterface PlanConnection {\n  active: boolean;\n  status: string;\n  payment?: PaymentDetails;\n}\n\ninterface MemberData {\n  planConnections: PlanConnection[];\n}\n\nfunction formatDate(timestamp: number): string {\n  const date = new Date(timestamp * 1000);\n  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  return date.toLocaleDateString('en-US', options);\n}\nexport function displayPlanDetails(\n  member: MemberData,\n  priceSelector: string = '[data-element=\"plan-price\"]',\n  renewalSelector: string = '[data-element=\"plan-renewal\"]',\n  statusSelector: string = '[data-element=\"plan-status\"]'\n): void {\n  // Include plans that are either active or in TRIALING status\n  const relevantPlans = member.planConnections.filter(\n    (pc) => (pc.active || pc.status === 'TRIALING') && pc.payment && pc.payment.nextBillingDate\n  );\n\n  // Sort by nextBillingDate descending (most recent first)\n  const sortedPlans = relevantPlans.sort((a, b) => {\n    if (a === undefined || b === undefined) {\n      return 0; // or return a value based on your sorting requirements\n    }\n\n    if (a.payment !== undefined && b.payment !== undefined) {\n      return b.payment.nextBillingDate - a.payment.nextBillingDate;\n    }\n\n    return 0;\n  });\n\n  // Take the first plan (most recent one)\n  const currentPlan = sortedPlans[0];\n\n  const priceElement = document.querySelector(priceSelector);\n  const renewalElement = document.querySelector(renewalSelector);\n  const statusElement = document.querySelector(statusSelector);\n\n  if (currentPlan && currentPlan.payment) {\n    if (priceElement) {\n      priceElement.textContent = `$${currentPlan.payment.amount}`;\n    }\n\n    if (renewalElement) {\n      const formattedDate = formatDate(currentPlan.payment.nextBillingDate);\n      renewalElement.textContent = formattedDate;\n    }\n\n    if (statusElement) {\n      statusElement.textContent = currentPlan.active ? 'Active' : 'Inactive';\n    }\n  } else {\n    // Handle case where there is no current plan or payment details\n    if (priceElement) {\n      priceElement.textContent = 'Free';\n    }\n    if (renewalElement) {\n      renewalElement.textContent = 'N/A';\n    }\n  }\n}\n", "import '$utils/gravatar';\nimport '$utils/copyright';\nimport '$utils/customfields';\n\nimport { membersFilters } from '$utils/memberDirectory';\nimport { displayPlanDetails } from '$utils/plan';\n\n// Attach membersFilters to the window object\ndeclare global {\n  interface Window {\n    membersFilters: () => void;\n  }\n}\n\nwindow.membersFilters = membersFilters || [];\nconst memberstack = window.$memberstackDom;\n\nif (!memberstack) {\n  throw new Error('MemberStack is not available.');\n} else {\n  /**\n   * Get and replace the current plan details.\n   */\n  memberstack.getCurrentMember().then(({ data: member }) => {\n    if (member) {\n      displayPlanDetails(member);\n    }\n\n    // Get MemberStack metadata\n    if (member && member.metaData) {\n      // For each metaData field, get the value and set the display style\n      Object.keys(member.metaData).forEach((key) => {\n        const value = member.metaData[key];\n\n        const elements = document.querySelectorAll(`[data-ms-metadata:${key}]`);\n\n        elements.forEach((element) => {\n          element.style.display = element.getAttribute(`data-ms-metadata:${key}`) === value ? 'block' : 'none';\n        });\n      });\n    }\n  });\n}\n\n/**\n * Populate CMS Data from an external API.\n */\nwindow.fsAttributes = window.fsAttributes || [];\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,iBAAsB,qBAAqB,OAAe;AACxD,UAAM,eAAe,mBAAmB,KAAK;AAC7C,UAAM,WAAW,4CAA4C,YAAY;AAGzE,UAAM,iBAAiB,SAAS,iBAAiB,2BAA2B;AAG5E,mBAAe,QAAQ,CAAC,UAAU;AAChC,YAAM,MAAM;AAAA,IACd,CAAC;AAAA,EACH;AAEA,iBAAsB,YAAY,OAAe;AAC/C,UAAM,eAAe,mBAAmB,KAAK;AAC7C,WAAO,4CAA4C,YAAY;AAAA,EACjE;AAEA,WAAS,iBAAiB,oBAAoB,WAAY;AAExD,WAAO,gBAAgB,iBAAiB,EAAE,KAAK,CAAC,EAAE,MAAM,OAAO,MAAM;AACnE,UAAI,UAAU,OAAO,KAAK,OAAO;AAC/B,6BAAqB,OAAO,KAAK,KAAK;AAAA,MACxC;AAAA,IACF,CAAC;AAAA,EACH,CAAC;;;ACzBD,WAAS,gBAAgB,WAAmB,8BAAoC;AAC9E,UAAM,eAAsB,oBAAI,KAAK,GAAE,YAAY;AACnD,UAAM,uBAA2C,SAAS,cAAc,QAAQ;AAEhF,QAAI,sBAAsB;AACxB,2BAAqB,cAAc,YAAY,SAAS;AAAA,IAC1D;AAAA,EACF;AAEA,WAAS,iBAAiB,oBAAoB,WAAY;AACxD,oBAAgB;AAAA,EAClB,CAAC;;;ACND,GAAC,WAAY;AACX,aAAS,iBAAiB,oBAAoB,WAAY;AAExD,YAAM,cAAc,aAAa,QAAQ,SAAS;AAClD,YAAM,QAAyB,cAAc,KAAK,MAAM,WAAW,IAAI,CAAC;AAGxE,YAAM,WAAW,SAAS,iBAA8B,uBAAuB;AAG/E,eAAS,QAAQ,CAAC,YAAY;AAE5B,cAAM,cAAc,QAAQ,aAAa,qBAAqB;AAE9D,YAAI,aAAa;AAEf,cAAI,YAAY,WAAW,GAAG,GAAG;AAC/B,kBAAM,oBAAoB,YAAY,MAAM,CAAC;AAG7C,gBAAI,MAAM,gBAAgB,MAAM,aAAa,iBAAiB,GAAG;AAC/D,sBAAQ,YAAY,YAAY,OAAO;AAAA,YACzC;AAAA,UACF,OAAO;AAEL,gBAAI,CAAC,MAAM,gBAAgB,CAAC,MAAM,aAAa,WAAW,GAAG;AAE3D,sBAAQ,YAAY,YAAY,OAAO;AAAA,YACzC;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,GAAG;;;ACjCH,iBAAsB,aAAa,OAAgB;AACjD,QAAI;AACF,UAAI,MAAM;AACV,aAAO,QAAQ,QAAQ;AACvB,YAAM,WAAW,MAAM,MAAM,GAAG;AAChC,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,aAAO;AAAA,IACT;AAAA,EACF;;;ACPO,WAAS,iBAAiB;AAC/B,WAAO,eAAe,OAAO,gBAAgB,CAAC;AAE9C,WAAO,aAAa,KAAK;AAAA,MACvB;AAAA,MACA,OAAO,qBAAmC;AAExC,cAAM,CAAC,eAAe,IAAI;AAC1B,YAAI,CAAC;AAAiB;AAGtB,cAAM,EAAE,aAAa,IAAI;AAGzB,cAAM,CAAC,SAAS,IAAI,aAAa;AACjC,cAAM,sBAAsB,UAAU;AAGtC,cAAM,UAAU,MAAM,aAAa;AAGnC,qBAAa,WAAW;AAGxB,cAAM,mBAAmB,QAAQ;AAAA,UAAI,CAAC,WACpC,iBAAiB,QAAQ,mBAAmB;AAAA,QAC9C;AACA,cAAM,WAAW,MAAM,QAAQ,IAAI,gBAAgB;AAGnD,qBAAa,SAAS,QAAQ;AAG9B,cAAM,wBACJ,gBAAgB,KAAK,cAAgC,yBAAyB;AAChF,YAAI,CAAC;AAAuB;AAG5B,cAAM,iBAAiB,sBAAsB;AAC7C,YAAI,CAAC;AAAgB;AAGrB,8BAAsB,OAAO;AAAA,MAI/B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,iBAAe,iBAAiB,QAAgB,iBAAiC;AAE/E,UAAM,UAAU,gBAAgB,UAAU,IAAI;AAG9C,UAAM,YAAY,QAAQ,cAA+B,6BAA6B;AACtF,UAAM,WAAW,QAAQ,cAA+B,4BAA4B;AACpF,UAAM,UAAU,QAAQ,cAAoC,0BAA0B;AACtF,UAAM,UAAU,QAAQ,cAAoC,0BAA0B;AACtF,UAAMA,YAAW,QAAQ,cAAoC,2BAA2B;AACxF,UAAM,QAAQ,QAAQ,cAAoC,wBAAwB;AAClF,UAAM,eAAe,QAAQ,cAAgC,gCAAgC;AAK7F,QAAI;AAAW,gBAAU,cAAc,OAAO;AAC9C,QAAI;AAAU,eAAS,cAAc,OAAO;AAG5C,QAAI,SAAS;AACX,cAAQ,cAAc;AACtB,UAAI,OAAO,SAAS;AAClB,gBAAQ,cAAc,OAAO;AAAA,MAC/B;AAAA,IACF;AAGA,QAAI,SAAS;AACX,UAAI,OAAO,SAAS;AAClB,gBAAQ,cAAc,OAAO;AAAA,MAC/B,OAAO;AACL,gBAAQ,MAAM,UAAU;AAAA,MAC1B;AAAA,IACF;AAGA,QAAIA,WAAU;AACZ,UAAI,OAAO,UAAU;AACnB,QAAAA,UAAS,cAAc,OAAO;AAAA,MAChC,OAAO;AACL,QAAAA,UAAS,MAAM,UAAU;AAAA,MAC3B;AAAA,IACF;AAGA,QAAI,OAAO;AACT,UAAI,OAAO,OAAO;AAChB,cAAM,cAAc,OAAO;AAAA,MAC7B,OAAO;AACL,cAAM,MAAM,UAAU;AAAA,MACxB;AAAA,IACF;AAGA,QAAI,cAAc;AAChB,mBAAa,MAAM,MAAM,YAAY,OAAO,KAAK;AAAA,IACnD;AAEA,WAAO;AAAA,EACT;;;ACvGA,WAAS,WAAW,WAA2B;AAC7C,UAAM,OAAO,IAAI,KAAK,YAAY,GAAI;AACtC,UAAM,UAAsC,EAAE,MAAM,WAAW,OAAO,QAAQ,KAAK,UAAU;AAC7F,WAAO,KAAK,mBAAmB,SAAS,OAAO;AAAA,EACjD;AACO,WAAS,mBACd,QACA,gBAAwB,+BACxB,kBAA0B,iCAC1B,iBAAyB,gCACnB;AAEN,UAAM,gBAAgB,OAAO,gBAAgB;AAAA,MAC3C,CAAC,QAAQ,GAAG,UAAU,GAAG,WAAW,eAAe,GAAG,WAAW,GAAG,QAAQ;AAAA,IAC9E;AAGA,UAAM,cAAc,cAAc,KAAK,CAAC,GAAG,MAAM;AAC/C,UAAI,MAAM,UAAa,MAAM,QAAW;AACtC,eAAO;AAAA,MACT;AAEA,UAAI,EAAE,YAAY,UAAa,EAAE,YAAY,QAAW;AACtD,eAAO,EAAE,QAAQ,kBAAkB,EAAE,QAAQ;AAAA,MAC/C;AAEA,aAAO;AAAA,IACT,CAAC;AAGD,UAAM,cAAc,YAAY,CAAC;AAEjC,UAAM,eAAe,SAAS,cAAc,aAAa;AACzD,UAAM,iBAAiB,SAAS,cAAc,eAAe;AAC7D,UAAM,gBAAgB,SAAS,cAAc,cAAc;AAE3D,QAAI,eAAe,YAAY,SAAS;AACtC,UAAI,cAAc;AAChB,qBAAa,cAAc,IAAI,YAAY,QAAQ,MAAM;AAAA,MAC3D;AAEA,UAAI,gBAAgB;AAClB,cAAM,gBAAgB,WAAW,YAAY,QAAQ,eAAe;AACpE,uBAAe,cAAc;AAAA,MAC/B;AAEA,UAAI,eAAe;AACjB,sBAAc,cAAc,YAAY,SAAS,WAAW;AAAA,MAC9D;AAAA,IACF,OAAO;AAEL,UAAI,cAAc;AAChB,qBAAa,cAAc;AAAA,MAC7B;AACA,UAAI,gBAAgB;AAClB,uBAAe,cAAc;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;;;AC3DA,SAAO,iBAAiB,kBAAkB,CAAC;AAC3C,MAAM,cAAc,OAAO;AAE3B,MAAI,CAAC,aAAa;AAChB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD,OAAO;AAIL,gBAAY,iBAAiB,EAAE,KAAK,CAAC,EAAE,MAAM,OAAO,MAAM;AACxD,UAAI,QAAQ;AACV,2BAAmB,MAAM;AAAA,MAC3B;AAGA,UAAI,UAAU,OAAO,UAAU;AAE7B,eAAO,KAAK,OAAO,QAAQ,EAAE,QAAQ,CAAC,QAAQ;AAC5C,gBAAM,QAAQ,OAAO,SAAS,GAAG;AAEjC,gBAAM,WAAW,SAAS,iBAAiB,qBAAqB,GAAG,GAAG;AAEtE,mBAAS,QAAQ,CAAC,YAAY;AAC5B,oBAAQ,MAAM,UAAU,QAAQ,aAAa,oBAAoB,GAAG,EAAE,MAAM,QAAQ,UAAU;AAAA,UAChG,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAKA,SAAO,eAAe,OAAO,gBAAgB,CAAC;",
  "names": ["location"]
}
